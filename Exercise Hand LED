## mainLED.py ##

import cv2
import mediapipe as mp
import time
import pyfirmata

time.sleep(2.0)

mp_draw=mp.solutions.drawing_utils #use function drawing_utils to draw straight connect landmark point
mp_hand=mp.solutions.hands #use function hands to find hand on camera
cap = cv2.VideoCapture(0)
mpHands = mp_hand.Hands()
mpDraw = mp_draw

tipIds=[4,8,12,16,20] # media-pipe position  of fingertips

def check_user_input(input):
    try:
       
        val = int(input)
     
        bv = True
    except ValueError:
        try:
            
            val = float(input)
           
            bv = True
        except ValueError:
          
            bv = False
    return bv            

cport = input('Enter the camera port: ')
while not (check_user_input(cport)):
    print('Please enter a number not string')
    cport = input('Enter the camera port: ')

comport = input('Enter the arduino board COM port: ')
while not (check_user_input(comport)):
    print('Please enter a number not string')
    comport = input('Enter the arduino board COM port: ')

board = pyfirmata.Arduino('COM' + comport)
led_pins = [board.get_pin(f'd:{pin}:o') for pin in [13, 12, 11, 10, 9]]

def led(fingers):
    for idx, pin in enumerate(led_pins):
        if fingers[idx] == 1:
            pin.write(1) 
        else:
            pin.write(0) 


video=cv2.VideoCapture(int(cport)) 

with mp_hand.Hands(min_detection_confidence=0.5,
               min_tracking_confidence=0.5) as hands: 
    while True:
        ret,image=video.read()                        
        image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  
        image.flags.writeable=False                   
        results=hands.process(image)               
        image.flags.writeable=True                   
        image=cv2.cvtColor(image, cv2.COLOR_RGB2BGR)  
        lmList=[]
        if results.multi_hand_landmarks:
            for hand_landmark in results.multi_hand_landmarks:
                myHands=results.multi_hand_landmarks[0]
                for id, lm in enumerate(myHands.landmark):
                    h,w,c=image.shape
                    cx,cy= int(lm.x*w), int(lm.y*h)
                    lmList.append([id,cx,cy])         
                mp_draw.draw_landmarks(image, hand_landmark, mp_hand.HAND_CONNECTIONS)  
        fingers=[]
        if len(lmList)!=0:
            
            if lmList[9][1]<lmList[5][1]:
                if lmList[tipIds[0]][1] > lmList[tipIds[0]-1][1]:
                    fingers.append(1)
                else:
                    fingers.append(0)
            else:
                if lmList[tipIds[0]][1] < lmList[tipIds[0]-1][1]:
                    fingers.append(1)
                else:
                    fingers.append(0)         
            for id in range(1,5): 
                if lmList[0][2]<lmList[5][2]: 
                    if lmList[tipIds[id]][2] > lmList[tipIds[id]-2][2]:
                        fingers.append(1)
                    else:
                        fingers.append(0)
                else:
                    if lmList[tipIds[id]][2] < lmList[tipIds[id]-2][2]:
                        fingers.append(1)
                    else:
                        fingers.append(0)         
            total=fingers.count(1)
            
            led(fingers) 
            """
            creat condition to put text in frame

            """
            if ((results.multi_hand_landmarks))!="None":
                cv2.rectangle(image, (20, 300), (270, 425), (0, 255, 0), cv2.FILLED)
                cv2.putText(image, str(total), (45, 375), cv2.FONT_HERSHEY_SIMPLEX,
                    2, (255, 0, 0), 5)
                cv2.putText(image, "LED", (100, 375), cv2.FONT_HERSHEY_SIMPLEX,
                    2, (255, 0, 0), 5)

                    
        cv2.imshow("Frame",image) 
        k=cv2.waitKey(1)
        if k==ord('q'):  
            break
video.release()
cv2.destroyAllWindows()
